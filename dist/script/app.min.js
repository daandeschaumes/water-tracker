const dataAccess = (function() {
  const local = (function() {
    const getProgressByDate = function(date) {
      //Check storage for the current day
      //key maken voor 2019-04 -> {1: []}
      return [["13:01", 100], ["12:10", 100], ["15:01", 100]];
    };
    //getAll
    //deleteItem
    return {
      getProgressByDate: getProgressByDate
    };
  })();

  const api = (function() {
    // Moet dezelfde functies hebben als local
    return;
  })();

  return {
    local: local,
    api: api
  };
})();

class ProgressTracker {
  constructor(options) {
    console.log(options);
    this.options = options;

    this.percentageValue = 0;
    this.currentProgress = [];
    //dataAccess[this.options.mode].getProgressOfToday() || [];
    this.timerId = null;

    this.percentageRatio = 100 / this.options.dailyGoal;

    this.percentage = document.querySelector(
      `.${this.options.domRefs.percentage}`
    );
    this.timeStampHolder = document.querySelector(
      `.${this.options.domRefs.timeStampHolder}`
    );
    this.addButton = document.querySelector(
      `.${this.options.domRefs.addButton}`
    );
    this.currentGoalHolders = document.querySelectorAll(
      `.${this.options.domRefs.currentGoal}`
    );
    this.currentUnitHolders = document.querySelectorAll(
      `.${this.options.domRefs.currentUnits}`
    );

    this.showUserOptions();

    this.restoreProgress();
    this.listenToNewLogging();
  }
  restoreProgress() {
    this.currentProgress = dataAccess[this.options.mode].getProgressByDate(
      new Date()
    );
    for (const p of this.currentProgress) {
      this.updateProgress(p);
    }

    // units: "ml",
    // dailyGoal: 2000,
    // mode: "local",
    // domRefs: {
    //   percentage: "js-amount",
    //   timeStampHolder: "js-timestamps",
    //   addButton: "js-log",
    //   currentGoal: "js-goal",
    //   currentUnits: "js-units"
    // },
    // afterUpdate: function(newPercentage) {
    //   console.log("It has been updated!");
    // }
  }

  updateProgress(newLogging = ["00:00", 0]) {
    if (this.timerId) {
      clearInterval(this.timerId);
    }
    //this.currentProgress.push(newLogging);
    this.showTimeStamp(newLogging[0]);
    const oldProgress = Number(this.percentage.innerText),
      newProgress = oldProgress + newLogging[1] * this.percentageRatio;

    this.percentageValue = newProgress;

    let v = oldProgress;
    this.timerId = setInterval(() => {
      this.percentage.innerText = v;
      if (v >= newProgress) {
        clearInterval(this.timerId);
      }
      v++;
    }, 32);
    this.options.afterUpdate(newProgress); //When finished, pass the new progress
  }

  showUserOptions() {
    for (const g of this.currentGoalHolders) {
      g.innerHTML = this.options.dailyGoal;
    }

    for (const u of this.currentUnitHolders) {
      u.innerHTML = this.options.units;
    }
  }

  showTimeStamp(timeStamp) {
    this.timeStampHolder.innerHTML += `<li class="c-time-stamp">${timeStamp}</li>`;
  }
  listenToNewLogging() {
    this.addButton.addEventListener("click", () => {
      console.log("Dataset is", this.addButton.dataset.amount);
      const now = new Date();
      const time = `${now
          .getHours()
          .toString()
          .padStart(2, "0")} : ${now
          .getMinutes()
          .toString()
          .padStart(2, "0")}`,
        amount = this.addButton.dataset.amount;
      this.updateProgress([time, amount]);
      // Todo: dataAccess[this.options.mode].saveLogging([time, amount]);
    });
  }
}

const uiBinding = (function() {
  //subModules
  const wave = (function() {
    this.waveElement = null;
    const setup = function(waveClass) {
      this.waveElement = document.querySelector(`.${waveClass}`);
    };
    const updateWaveHeight = function(newPercentage) {
      if (newPercentage > 100) newPercentage = 100;
      this.waveElement.style.transform = `translateY(${100 - newPercentage}%)`;
    };

    return {
      setup: setup,
      updateWaveHeight: updateWaveHeight
    };
  })();

  const logging = (function() {
    this.addButton; //binnenin logging kunnen we addbutton aanspreken

    const setup = function(buttonClass) {
      this.addButton = document.querySelector(`.${buttonClass}`);
    };

    const enableAmountOptions = function() {
      this.addButton.addEventListener("click", function() {
        console.log(this.dataset);
      });
    };

    return {
      setup: setup,
      enableAmountOptions: enableAmountOptions
    };
  })();

  return {
    wave: wave,
    logging: logging
  };
})();

(function() {
  console.log("ðŸ’§", "https://www.youtube.com/watch?v=ARC1w1WWxGY");

  const options = {
    units: "ml",
    dailyGoal: 1600,
    mode: "local",
    domRefs: {
      percentage: "js-amount",
      timeStampHolder: "js-timestamps",
      addButton: "js-log",
      currentGoal: "js-goal",
      currentUnits: "js-units"
    },
    afterUpdate: function(newPercentage) {
      uiBinding.wave.updateWaveHeight(newPercentage);
      console.log("It has been updated!", newPercentage);
    }
  };

  document.addEventListener("DOMContentLoaded", () => {
    uiBinding.wave.setup("js-waves");
    uiBinding.logging.setup("js-log");

    uiBinding.logging.enableAmountOptions();
    new ProgressTracker(options);
  });
})();
